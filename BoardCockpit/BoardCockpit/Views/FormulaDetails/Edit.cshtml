@model BoardCockpit.Models.FormulaDetail

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>
<div class="row">
    <div class="tile half bg-cyan" data-click="transform">
        <div class="tile-content icon">
            <a href="@Url.Action("Index")">
                <i class="icon-undo"></i>
            </a>
        </div>
    </div>
</div>

<div class="row">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>FormulaDetail</h4>
            <hr />
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.FormulaDetailID)

            <div class="form-group">
                <div class="ui-widget">
                    @Html.LabelFor(model => model.FormulaExpression, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FormulaExpression, new { htmlAttributes = new { @name = "tags" } })
                        @Html.ValidationMessageFor(model => model.FormulaExpression)
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FormulaID, "FormulaID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("FormulaID", String.Empty)
                    @Html.ValidationMessageFor(model => model.FormulaID)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <table>
                        <tr>
                            @{
        int cnt = 0;
        List<BoardCockpit.ViewModels.AssignedFormulaDetailData> taxonomies = ViewBag.Taxonomies;

        foreach (var taxonomy in taxonomies)
        {
            if (cnt++ % 3 == 0)
            {
                @:
            </tr>
            <tr>
                                }
                                @:
                                <td>
                                    <input type="checkbox"
                                           class="selectedTaxonomies"
                                           name="selectedTaxonomy"
                                           value="@taxonomy.TaxonomyID"
                                           @(Html.Raw(taxonomy.Assigned ? "checked=\"checked\"" : "")) />
                                    @taxonomy.TaxonomyID @:  @taxonomy.TaxonomyName
                                    @:
                                </td>
                            }
                            @:
                        </tr>
                            }
                        </table>
                    </div>
                </div>



                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
    }
</div>
                                
    @section CustomJS{
        <link href="~/Content/autocomplete/jquery-ui.css" rel="stylesheet" type="text/css" />
        <script type="text/javascript">
            $(function () {
                function split(val) {
                    var test = val.split(/[+-\/*\s*]/);
                    return test;
                }

                function split3(val) {
                    var test = val.split(/[\s()*/%+-]+/g);
                    return test;
                }

                function split2(val) {
                    return val.split(/\s/);
                }

                function extractLast(term) {
                    var test2 = split3(term).pop();
                    return test2;
                }

                function getTaxonomy() {
                    //var checkedValue = $('.selectedTaxonomies:checked').val();
                    //var chrArray = [];
                    var stringArray = new Array();
                    $('.selectedTaxonomies:checked').each(function () {
                        stringArray.push($(this).val());
                    });
                    return stringArray.toString();
                }

                $("#FormulaExpression")
                // don't navigate away from the field on tab when selecting an item
                .bind("keydown", function (event) {
                    if (event.keyCode === $.ui.keyCode.TAB &&
                    $(this).data("ui-autocomplete").menu.active) {
                        event.preventDefault();
                    }
                })
                .autocomplete({
                    minLength: 0,
                    source: function (request, response) {
                        var postData = { term: extractLast(request.term), cb: getTaxonomy() };
                        // delegate back to autocomplete, but extract the last term
                        $.ajax({
                            type: "GET",
                            dataType: "json",
                            url: "/FormulaDetails/GetTaxonomyNode",
                            data: postData,
                            success: function (data) {
                                response($.ui.autocomplete.filter(
                                    data, extractLast(request.term)));
                            }
                        })
                        //response($.ui.autocomplete.filter(
                        //availableTags, extractLast(request.term)));
                        //getAvailableTags(), extractLast(request.term)));
                    },
                    focus: function () {
                        // prevent value inserted on focus
                        return false;
                    },
                    select: function (event, ui) {
                        var terms = split2(this.value);
                        // remove the current input
                        terms.pop();
                        // add the selected item
                        terms.push(ui.item.value);
                        // add placeholder to get the comma-and-space at the end
                        terms.push("");
                        this.value = terms.join(" ");
                        return false;
                    }
                });
            });
        </script>
    }
